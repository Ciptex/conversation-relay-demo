// Code generated by gowsdl DO NOT EDIT.

package cardeasy

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type PSPsubmit struct {
	Token string `xml:"token,omitempty" json:"token,omitempty"`

	PSPurl string `xml:"PSPurl,omitempty" json:"PSPurl,omitempty"`

	PSP_ContentType string `xml:"PSP_ContentType,omitempty" json:"PSP_ContentType,omitempty"`

	PSP_Auth_user string `xml:"PSP_Auth_user,omitempty" json:"PSP_Auth_user,omitempty"`

	PSP_Auth_pwd string `xml:"PSP_Auth_pwd,omitempty" json:"PSP_Auth_pwd,omitempty"`

	PSPheader []*KeyValue `xml:"PSPheader,omitempty" json:"PSPheader,omitempty"`

	PSPbody string `xml:"PSPbody,omitempty" json:"PSPbody,omitempty"`
}

type KeyValue struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ keyValue"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type PSPsubmitResponse struct {
	ResultHR string `xml:"resultHR,omitempty" json:"resultHR,omitempty"`

	BenignPAN string `xml:"benignPAN,omitempty" json:"benignPAN,omitempty"`

	PSPresult string `xml:"PSPresult,omitempty" json:"PSPresult,omitempty"`
}

type CapturePAN struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ capturePAN"`

	Customer string `xml:"Customer,omitempty" json:"Customer,omitempty"`

	Epid string `xml:"epid,omitempty" json:"epid,omitempty"`

	CapMethod string `xml:"capMethod,omitempty" json:"capMethod,omitempty"`

	BeepFlag string `xml:"beepFlag,omitempty" json:"beepFlag,omitempty"`

	VisiblePrefixDigits int32 `xml:"visiblePrefixDigits,omitempty" json:"visiblePrefixDigits,omitempty"`

	VisibleSuffixDigits int32 `xml:"visibleSuffixDigits,omitempty" json:"visibleSuffixDigits,omitempty"`
}

type CapturePANResponse struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ capturePANResponse"`

	ResultCode string `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	ResultHR string `xml:"resultHR,omitempty" json:"resultHR,omitempty"`

	BenignPAN string `xml:"benignPAN,omitempty" json:"benignPAN,omitempty"`

	Pid string `xml:"pid,omitempty" json:"pid,omitempty"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	IssuerName string `xml:"issuerName,omitempty" json:"issuerName,omitempty"`

	Brand string `xml:"brand,omitempty" json:"brand,omitempty"`

	ProductType string `xml:"productType,omitempty" json:"productType,omitempty"`

	Level string `xml:"level,omitempty" json:"level,omitempty"`

	IsoCountry string `xml:"isoCountry,omitempty" json:"isoCountry,omitempty"`

	LuhnToken string `xml:"luhnToken,omitempty" json:"luhnToken,omitempty"`
}

type CaptureCV2 struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureCV2"`

	Pid string `xml:"pid,omitempty" json:"pid,omitempty"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Epid string `xml:"epid,omitempty" json:"epid,omitempty"`

	CapMethod string `xml:"capMethod,omitempty" json:"capMethod,omitempty"`

	BeepFlag string `xml:"beepFlag,omitempty" json:"beepFlag,omitempty"`
}

type CaptureCV2Response struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureCV2Response"`

	ResultCode string `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	ResultHR string `xml:"resultHR,omitempty" json:"resultHR,omitempty"`
}

type CaptureED struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureED"`

	Customer string `xml:"Customer,omitempty" json:"Customer,omitempty"`

	Epid string `xml:"epid,omitempty" json:"epid,omitempty"`

	CapMethod string `xml:"capMethod,omitempty" json:"capMethod,omitempty"`

	BeepFlag string `xml:"beepFlag,omitempty" json:"beepFlag,omitempty"`
}

type CaptureEDResponse struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureEDResponse"`

	ResultCode string `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	ResultHR string `xml:"resultHR,omitempty" json:"resultHR,omitempty"`

	Digits string `xml:"digits,omitempty" json:"digits,omitempty"`

	Pid string `xml:"pid,omitempty" json:"pid,omitempty"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`
}

type CaptureCVVO struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureCVVO"`

	Customer string `xml:"Customer,omitempty" json:"Customer,omitempty"`

	Epid string `xml:"epid,omitempty" json:"epid,omitempty"`

	NumDigits string `xml:"numDigits,omitempty" json:"numDigits,omitempty"`

	CapMethod string `xml:"capMethod,omitempty" json:"capMethod,omitempty"`

	BeepFlag string `xml:"beepFlag,omitempty" json:"beepFlag,omitempty"`
}

type CaptureCVVOResponse struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureCVVOResponse"`

	ResultCode string `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	ResultHR string `xml:"resultHR,omitempty" json:"resultHR,omitempty"`

	Digits string `xml:"digits,omitempty" json:"digits,omitempty"`

	Pid string `xml:"pid,omitempty" json:"pid,omitempty"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	CvvId string `xml:"cvvId,omitempty" json:"cvvId,omitempty"`
}

type CaptureABARTN struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureABARTN"`

	Customer string `xml:"Customer,omitempty" json:"Customer,omitempty"`

	Epid string `xml:"epid,omitempty" json:"epid,omitempty"`

	CapMethod string `xml:"capMethod,omitempty" json:"capMethod,omitempty"`

	BeepFlag string `xml:"beepFlag,omitempty" json:"beepFlag,omitempty"`

	VisiblePrefixDigits int32 `xml:"visiblePrefixDigits,omitempty" json:"visiblePrefixDigits,omitempty"`

	VisibleSuffixDigits int32 `xml:"visibleSuffixDigits,omitempty" json:"visibleSuffixDigits,omitempty"`
}

type CaptureABARTNResponse struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureABARTNResponse"`

	ResultCode string `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	ResultHR string `xml:"resultHR,omitempty" json:"resultHR,omitempty"`

	Digits string `xml:"digits,omitempty" json:"digits,omitempty"`

	Pid string `xml:"pid,omitempty" json:"pid,omitempty"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`
}

type CaptureGEN struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureGEN"`

	Customer string `xml:"Customer,omitempty" json:"Customer,omitempty"`

	Epid string `xml:"epid,omitempty" json:"epid,omitempty"`

	MinimumDigits int32 `xml:"minimumDigits,omitempty" json:"minimumDigits,omitempty"`

	MaximumDigits int32 `xml:"maximumDigits,omitempty" json:"maximumDigits,omitempty"`

	SubstitutionName string `xml:"substitutionName,omitempty" json:"substitutionName,omitempty"`

	CapMethod string `xml:"capMethod,omitempty" json:"capMethod,omitempty"`

	BeepFlag string `xml:"beepFlag,omitempty" json:"beepFlag,omitempty"`

	VisiblePrefixDigits int32 `xml:"visiblePrefixDigits,omitempty" json:"visiblePrefixDigits,omitempty"`

	VisibleSuffixDigits int32 `xml:"visibleSuffixDigits,omitempty" json:"visibleSuffixDigits,omitempty"`
}

type CaptureGENResponse struct {
	XMLName xml.Name `xml:"https://soap.syntec.co.uk/ captureGENResponse"`

	ResultCode string `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	ResultHR string `xml:"resultHR,omitempty" json:"resultHR,omitempty"`

	Digits string `xml:"digits,omitempty" json:"digits,omitempty"`

	Pid string `xml:"pid,omitempty" json:"pid,omitempty"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`
}

type Cardeasy interface {
	CaptureCV2(request *CaptureCV2) (*CaptureCV2Response, error)

	CaptureCV2Context(ctx context.Context, request *CaptureCV2) (*CaptureCV2Response, error)

	CapturePAN(request *CapturePAN) (*CapturePANResponse, error)

	CapturePANContext(ctx context.Context, request *CapturePAN) (*CapturePANResponse, error)

	CaptureCVVO(request *CaptureCVVO) (*CaptureCVVOResponse, error)

	CaptureCVVOContext(ctx context.Context, request *CaptureCVVO) (*CaptureCVVOResponse, error)

	CaptureED(request *CaptureED) (*CaptureEDResponse, error)

	CaptureEDContext(ctx context.Context, request *CaptureED) (*CaptureEDResponse, error)

	CaptureABARTN(request *CaptureABARTN) (*CaptureABARTNResponse, error)

	CaptureABARTNContext(ctx context.Context, request *CaptureABARTN) (*CaptureABARTNResponse, error)

	CaptureGEN(request *CaptureGEN) (*CaptureGENResponse, error)

	CaptureGENContext(ctx context.Context, request *CaptureGEN) (*CaptureGENResponse, error)

	PSPsubmit(request *PSPsubmit) (*PSPsubmitResponse, error)

	PSPsubmitContext(ctx context.Context, request *PSPsubmit) (*PSPsubmitResponse, error)
}

type cardeasy struct {
	client *soap.Client
}

func NewCardeasy(client *soap.Client) Cardeasy {
	return &cardeasy{
		client: client,
	}
}

func (service *cardeasy) CaptureCV2Context(ctx context.Context, request *CaptureCV2) (*CaptureCV2Response, error) {
	response := new(CaptureCV2Response)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cardeasy) CaptureCV2(request *CaptureCV2) (*CaptureCV2Response, error) {
	return service.CaptureCV2Context(
		context.Background(),
		request,
	)
}

func (service *cardeasy) CapturePANContext(ctx context.Context, request *CapturePAN) (*CapturePANResponse, error) {
	response := new(CapturePANResponse)
	err := service.client.CallContext(ctx, `""`, request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cardeasy) CapturePAN(request *CapturePAN) (*CapturePANResponse, error) {
	return service.CapturePANContext(
		context.Background(),
		request,
	)
}

func (service *cardeasy) CaptureCVVOContext(ctx context.Context, request *CaptureCVVO) (*CaptureCVVOResponse, error) {
	response := new(CaptureCVVOResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cardeasy) CaptureCVVO(request *CaptureCVVO) (*CaptureCVVOResponse, error) {
	return service.CaptureCVVOContext(
		context.Background(),
		request,
	)
}

func (service *cardeasy) CaptureEDContext(ctx context.Context, request *CaptureED) (*CaptureEDResponse, error) {
	response := new(CaptureEDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cardeasy) CaptureED(request *CaptureED) (*CaptureEDResponse, error) {
	return service.CaptureEDContext(
		context.Background(),
		request,
	)
}

func (service *cardeasy) CaptureABARTNContext(ctx context.Context, request *CaptureABARTN) (*CaptureABARTNResponse, error) {
	response := new(CaptureABARTNResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cardeasy) CaptureABARTN(request *CaptureABARTN) (*CaptureABARTNResponse, error) {
	return service.CaptureABARTNContext(
		context.Background(),
		request,
	)
}

func (service *cardeasy) CaptureGENContext(ctx context.Context, request *CaptureGEN) (*CaptureGENResponse, error) {
	response := new(CaptureGENResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cardeasy) CaptureGEN(request *CaptureGEN) (*CaptureGENResponse, error) {
	return service.CaptureGENContext(
		context.Background(),
		request,
	)
}

func (service *cardeasy) PSPsubmitContext(ctx context.Context, request *PSPsubmit) (*PSPsubmitResponse, error) {
	response := new(PSPsubmitResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cardeasy) PSPsubmit(request *PSPsubmit) (*PSPsubmitResponse, error) {
	return service.PSPsubmitContext(
		context.Background(),
		request,
	)
}
